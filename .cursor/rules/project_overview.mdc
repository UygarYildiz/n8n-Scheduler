---
description: 
globs: 
alwaysApply: false
---
# Proje Özeti: Kurumsal Optimizasyon (CP-SAT & n8n)

Bu proje, CP-SAT optimizasyonu ve n8n otomasyonunu kullanarak kurumsal süreçleri optimize etmeyi hedefler. Esneklik ve uyarlanabilirlik anahtar hedeflerdir.

## Ana Bileşenler ve Belgeler

1.  **Genel Bakış:** Projenin ana hedefleri ve yapısı [README.md](mdc:README.md) dosyasında açıklanmıştır.
2.  **Mimari:** Sistem üç ana bölümden oluşur: n8n (Veri/Otomasyon), Python/CP-SAT (Optimizasyon Çekirdeği) ve Konfigürasyon. Detaylar [docs/architecture.md](mdc:docs/architecture.md) dosyasındadır.
3.  **Uyarlanabilirlik:** Projenin farklı kurumlara nasıl uyarlanacağı [docs/adaptability.md](mdc:docs/adaptability.md) içinde açıklanmıştır. Bu, büyük ölçüde [docs/configuration.md](mdc:docs/configuration.md) içinde tanımlanan YAML/JSON konfigürasyon dosyaları ile sağlanır.
4.  **Veri Akışı:** n8n ve Optimizasyon Çekirdeği arasındaki iletişim için standart JSON formatları [docs/data_model.md](mdc:docs/data_model.md) dosyasında tanımlanmıştır.
5.  **Yol Haritası ve Kurulum:** Projenin 5 haftalık planı [docs/roadmap.md](mdc:docs/roadmap.md) içinde, geliştirme ortamı kurulumu ise [docs/setup.md](mdc:docs/setup.md) dosyasındadır.
6.  **Bağımlılıklar:** Python bağımlılıkları [requirements.txt](mdc:requirements.txt) dosyasında listelenmiştir.

## Anahtar Kavramlar

*   **CP-SAT:** Google OR-Tools'dan çekirdek optimizasyon çözücü.
*   **n8n:** Uçtan uca otomasyon platformu.
*   **Konfigürasyon Dosyaları:** Kuruma özel kuralları ve parametreleri (örn. minimum personel) içeren YAML/JSON dosyaları.
*   **Dinamik Model Oluşturma:** Python kodunun, konfigürasyon dosyasına göre CP-SAT kısıtlarını dinamik olarak oluşturması.

# Unutulmamaması Gereken
- [roadmap.md](mdc:docs/roadmap.md) yi her zaman güncel tutmalısın ve yaptıklarımızı işaretlemelisin
 
## Genel Kurallar
1. **Verify Information**: Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.

2. **File-by-File Changes**: Make changes file by file and give me a chance to spot mistakes.

3. **No Apologies**: Never use apologies.

4. **No Understanding Feedback**: Avoid giving feedback about understanding in comments or documentation.

5. **No Whitespace Suggestions**: Don't suggest whitespace changes.

6. **No Summaries**: Don't summarize changes made.

7. **No Inventions**: Don't invent changes other than what's explicitly requested.

8. **No Unnecessary Confirmations**: Don't ask for confirmation of information already provided in the context.

9. **Preserve Existing Code**: Don't remove unrelated code or functionalities. Pay attention to preserving existing structures.

10. **Single Chunk Edits**: Provide all edits in a single chunk instead of multiple-step instructions or explanations for the same file.

11. **No Implementation Checks**: Don't ask the user to verify implementations that are visible in the provided context.

12. **No Unnecessary Updates**: Don't suggest updates or changes to files when there are no actual modifications needed.

13. **Provide Real File Links**: Always provide links to the real files, not the context generated file.

14. **No Current Implementation**: Don't show or discuss the current implementation unless specifically requested.

15. **Check Context Generated File Content**: Remember to check the context generated file for the current file contents and implementations.

16. **Use Explicit Variable Names**: Prefer descriptive, explicit variable names over short, ambiguous ones to enhance code readability.

17. **Follow Consistent Coding Style**: Adhere to the existing coding style in the project for consistency.

18. **Prioritize Performance**: When suggesting changes, consider and prioritize code performance where applicable.

19. **Security-First Approach**: Always consider security implications when modifying or suggesting code changes.

20. **Test Coverage**: Suggest or include appropriate unit tests for new or modified code.

21. **Error Handling**: Implement robust error handling and logging where necessary.

22. **Modular Design**: Encourage modular design principles to improve code maintainability and reusability.

23. **Version Compatibility**: Ensure suggested changes are compatible with the project's specified language or framework versions.

24. **Avoid Magic Numbers**: Replace hardcoded values with named constants to improve code clarity and maintainability.

25. **Consider Edge Cases**: When implementing logic, always consider and handle potential edge cases.

26. **Use Assertions**: Include assertions wherever possible to validate assumptions and catch potential errors early.

27. **Rodmap** : HEr tmamla

